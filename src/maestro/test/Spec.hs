{-# LANGUAGE DataKinds #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -Wno-deprecations #-}

module Main (main) where

import Cardano.Api qualified as C

-- import Convex.Class (MonadBlockchain (..))
-- import Convex.Maestro (evalMaestroT)
-- import Data.ByteString.Base16 qualified as B16
-- import Data.Text.Encoding qualified as TE
-- import qualified Data.ByteString as BS
import Test.Tasty (TestTree, defaultMain, testGroup)
import Test.Tasty.HUnit (Assertion, testCase, (@?))

import Control.Exception (try)
import Convex.Class
import Convex.Maestro (evalMaestroT)
import Data.Map qualified as M
import Data.Maybe
import Data.Set qualified as Set
import Maestro.Client.V1
import Maestro.Types.V1

main :: IO ()
main = defaultMain tests

tests :: TestTree
tests =
  testGroup
    "convex-maestro"
    [ testCase "ChainTip can be fetched" testUtxoByTxIn
    , testCase "Submit CBOR hex via MaestroT (deadbeef fails to decode)" testUtxoByTxIn
    ]

testUtxoByTxIn :: Assertion
testUtxoByTxIn = do
  menv <- mkMaestroEnv @'V1 "ASsgZfnJ8V67O8NwEfUYxFth4O94Gjsa" Preprod defaultBackoff -- This is how we create an environment against which we'll query endpoints.
  _chainTip :: ChainTip <- getTimestampedData <$> getChainTip menv -- Maestro endpoint to get for chain-tip has data & timestamp against which data was calculated. All endpoints which are timestamped, has functions `getTimestampedData` to get for underlying data & `getTimestamp` to get the timestamp.
  addressesUTxOs :: Either MaestroError [UtxoWithSlot] <-
    try $ -- To catch for any errors, given in type `MaestroError`.
      allPages $ -- Since this endpoint is paged, we have a helper utility `allPages` to accumulate data from all the pages.
        flip
          ( utxosAtMultiAddresses
              menv
              (Just True) -- We would like to have datums resolved. This is for @resolve_datums@ query parameter.
              (Just False) -- We would not like to include CBOR encodings of the transaction outputs in the response.
          )
          ["addr_test1vry38htgy3ycp43ve3tp9ft0q24kh00zurk3dck59jvvumqs9zkzc"] -- Mention your list of addresses to query for.
  print addressesUTxOs
  result <-
    evalMaestroT
      menv
      (listToMaybe . M.toList . C.unUTxO <$> utxoByTxIn (Set.fromList [C.TxIn "80ef5e073e9d703182cf7368a9b65caedee0b2477798430246234d297fba4a6c" (C.TxIx 0)]))
  isJust result @? "UTxO should be found"

-- Submit a tx using MaestroT from a CBOR hex (expected to fail for "deadbeef")
-- Succeeded with result:
--      sendTx result: Right "bb7003b0b5546ddc0feacc5e0b8d3910506e5b5a58aa28314e7fd8f65589fa3c"
--
--
--
-- let hex = "84a600d9010281825820af4a6e0ed412506c61552dc7ff652fef45bb3036f71da38380738f17f2c1cbbe050dd9010281825820af4a6e0ed412506c61552dc7ff652fef45bb3036f71da38380738f17f2c1cbbe050182a300581d70d42cc1e207aad877db00e8b063b616e5fb5d2e67431214409b3abaaf01821a00204a72a1581cd42cc1e207aad877db00e8b063b616e5fb5d2e67431214409b3abaafa1534e6967687450726f746f636f6c506172616d7301028201d81858e7d8799fd87a9f581c7935cdcbad52e97d56854f7fbe0e9cd3b8daedb78b30dfbf9260636fff581ce613dd68244980d62ccc5612a56f02ab6bbde2e0ed16e2d42c98be6ad8799fd8799f581cc913dd68244980d62ccc5612a56f02ab6bbde2e0ed16e2d42c98ce6cffd87a80ffd8799fd8799f581c47320aeddd92dd1e4c697bb256d784da114d4cdcce55e780ccf3a1d2ffd87a80ff9fd8799fd8799fd8799f581cc913dd68244980d62ccc5612a56f02ab6bbde2e0ed16e2d42c98ce6cffd87a80ff00ffff9f581cc913dd68244980d62ccc5612a56f02ab6bbde2e0ed16e2d42c98ce6cff01ff82581d60c913dd68244980d62ccc5612a56f02ab6bbde2e0ed16e2d42c98ce6c1b00000002523b0284021a000477a709a1581cd42cc1e207aad877db00e8b063b616e5fb5d2e67431214409b3abaafa1534e6967687450726f746f636f6c506172616d73010b5820fc183b1fc3e75405bd00291663f5edd5b2d21bdd65fdf0cba6853c36930bac16a300d9010281825820fdda10ce901797e455720e7a6ea2bd46137a3ec0fd6b9058bc5f1a134ca38285584097db435d7bd47555c0d6ef4906591fca13aafd686e05e6b8836eea382cf63f9307fe798ba204d7b265f526e462f1a1e35f2b922c3a630f701c1e21499dcb170007d90102815908345908310101003229800aba2aba1aba0aab9faab9eaab9dab9a48888889660033001300337540112259800800c520008992cc0040062b30013370e6e34dd718048012407114800a2c8022264b30013370e6e3400520388acc004cdc80009bae300a002899b8048008cc01001000a2c802a2c8028dd71804801200e30090014019370e90004dc3a400522323300100100322330030013002002918039804000c88c8cc00400400c88c966002600800310018998018019806001200c300a0014888888a6002601c00f300d0079803003488c96600260100031323259800980980140122c8080dd7180880098069baa0038acc004c01c00626464b300130130028024590101bae3011001300d375400716402c8058c02cdd50012444466453001300f37540052259800980698089baa00289919192cc004c06400a26600c60300060091640586eb4c05c004c05c004c048dd50014590104c04c019222598009806801c4c8cc88cc89660026026003159800980c1baa00680145901945660026024003159800980c1baa006801459019459016202c13232598009809980b9baa006899199119912cc004c05cc070dd5000c4c9660026032603a6ea802626645300137586046005375a604660480053023001981198121812000a4444b30013370e900218119baa0018992cc004c080c090dd5000c4c8c8c8c8c8c8ca60026eb4c0bc0066eb8c0bc01a605e00b302f0049bac302f0039bac302f002488888966002606c00f133025303500d13302300413302300313302b002225980080144cc0b400c896600200515980099baf3039303637540286072606c6ea80722b3001337109000005456600266e24028c0a8016266e24054cc07c06c05a2941034452820688a5040d11323002303b003375c607200481ba266046606e00426002607000481aa2c8198605e002605c002605a002605800260560026054002604a6ea80062c8118c09cc090dd5000c590220c088c088c088c088c088c078dd51810980f1baa009301e37546602a6eb0c0840148cc89660020030028992cc0040060071598009813000c4cdc79bae30213025001005801a046408c604a00281105281bab3017301f37540031640706eb8c080c074dd5000c5901b1bac301e301f301f301f301f301f301f002301e301b3754002603a603a002603860326ea8c044c064dd5198081bac301c00123375e603a60346ea8004018c060dd5006c5660026026602e6ea800e26466e24dd6980e180e800998011bac301c301d301d301d301d301d301d301d301d3019375401c6eb0c070004c070c070c070c070c070c060dd5180d980c1baa0038b202c40586002002444b30010028a40011332259800801c52000899912cc004cdc780200144cdc0240053001007801c005007456600266e4001000a33001007801c01500746600200f006800a00e406c80d8dd7180f001980f801a038375c6038004603a00480d0c054dd5002180b800980b980c00098099baa0058acc004c03800e265300130183018001998059bac301700123375e6030602a6ea800406e6eb8c05cc050dd50032444b30013375e6e9966002942297adef6c608991919800800a5eb7bdb180896600200313301c337606ea4010dd3001a5eb7bdb1822653001375c603400337566036003301f00248896600266e4002000e26604066ec0dd48041ba60070058acc004cdc7804001c4cc080cdd81ba9008374c00e003133020337606ea400cdd300119803003000a0384070301d001406c646600200297adef6c602259800800c4cc06ccdd826114534e6967687450726f746f636f6c506172616d73004c010101004bd6f7b63044ca60026eb8c0640066eb4c068006603c0049112cc004cdc82441134e6967687450726f746f636f6c506172616d730000389980f99bb04c0114534e6967687450726f746f636f6c506172616d73004c010101000058acc004cdc7a441134e6967687450726f746f636f6c506172616d730000389980f99bb04c0114534e6967687450726f746f636f6c506172616d73004c0101010000189980f99bb037520066ea0008cc01801800501b2036180e000a034405460346036603600713233225980099b8748010c064dd5000c4c966002602c60346ea80062646464646464653001375a604a003375c604a00d302500598128024dd61812801cdd618128012444444b3001302c00789980d981580689980c80209980c801899810801112cc00400a26604600644b30010028acc004cdc42400001515980099b8900a3020005899baf302f302c375402866e9520023302e375202c97ae08a5040a914a08152264600460620066eb8c0bc00902d44cc064c0b40084c004c0b800902b4590290c094004c090004c08c004c088004c084004c080004c06cdd5000c59019180e980d1baa0018b2030301b001301b301c301c001301737546601c6eb0c06800c8cc89660020030028992cc004006007159800980f800c4cdc79bae301a301e001005801a0384070603c00280d85281bab3010301837540031640543013375401116404480886022602400844b3001300b300f3754005132323259800980b80144cc018c05800c4c966002601e00313259800980c800c4c8c966002602400313259800980e000c4cc02cc06c0040262c80c8c05cdd500145660026022003132323298009bad301d0019bad301d0039bad301d002488966002604200900e8b203c180e800980e000980b9baa0028b202a4054602a6ea8004c0600062c80b0c050dd50014566002601c003159800980a1baa002802c59015459012202430123754003164050602a002602a00260206ea800a2c80708a4d1365640044c0127d8799f5820af4a6e0ed412506c61552dc7ff652fef45bb3036f71da38380738f17f2c1cbbe05ff000105a182010082d87980821a0001e7ef1a02807259f5f6"
-- case B16.decode (TE.encodeUtf8 hex) of
--   Left err -> putStrLn ("Invalid hex: " <> show err)
--   Right (bytes :: BS.ByteString) ->
--     case C.deserialiseFromCBOR (C.AsTx C.AsConwayEra) bytes of
--       Left derr -> putStrLn ("CBOR decode failed: " <> show derr)
--       Right (tx :: C.Tx C.ConwayEra) -> do
--         putStrLn "Submitting tx via MaestroT..."
--         res <- evalMaestroT env (sendTx @C.ConwayEra tx)
--         putStrLn ("sendTx result: " <> show res)
