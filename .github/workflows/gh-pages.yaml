name: Build haddocks and publish to github pages
on:
  push:
    branches: [ "main" ]
    tags: [ "*.*.*" ]
  pull_request:

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # install deps.
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsystemd-dev

      # cache libsodium
      - name: cache libsodium-1.0.18
        id: libsodium
        uses: actions/cache@v2
        with:
          path: ~/libsodium-stable
          key: ${{ runner.os }}-libsodium-1.0.18

      # install libsodium with cache
      - name: Install cache libsodium-1.0.18
        if: steps.libsodium.outputs.cache-hit == 'true'
        run: cd ~/libsodium-stable && ./configure && make -j2 && sudo make install

      # download & install libsodium without cache
      - name: Install libsodium
        if: steps.libsodium.outputs.cache-hit != 'true'
        run: |
          wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable.tar.gz
          tar -xvzf libsodium-1.0.18-stable.tar.gz -C ~
          cd ~/libsodium-stable
          ./configure
          make -j2 && make check
          sudo make install
          cd -

      # cache secp256K1
      - name: cache libsecp256k1
        id: libsecp256k1
        uses: actions/cache@v2
        with:
          path: ~/secp256k1
          key: libsecp256k1

      # install libsecp256k1 with cache
      - name: Install cache libsecp256k1
        if: steps.libsecp256k1.outputs.cache-hit == 'true'
        run: |
          cd ~/secp256k1
          ./autogen.sh
          ./configure --enable-module-schnorrsig --enable-experimental
          make
          sudo make install
          cd -

      # download & install secp256k1
      - name: Install libsecp256k1
        if: steps.libsecp256k1.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/bitcoin-core/secp256k1 ~/secp256k1
          cd ~/secp256k1
          git checkout ac83be33
          ./autogen.sh
          ./configure --enable-module-schnorrsig --enable-experimental
          make
          sudo make install
          cd -

      # set up environment variables
      - name: Setup environment variables
        run: |
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - uses: haskell-actions/setup@v2
        id: setuphaskell
        with:
          ghc-version: '9.2.8'
          cabal-version: '3.10.1.0'

      - name: Cache .cabal
        uses: actions/cache@v3
        with:
          path: ${{ steps.setuphaskell.outputs.cabal-store }}
          key: cabal-haddocks-${{ hashFiles('cabal.project') }}

      - name: Set up cabal.project.local
        run: |
          echo "package cardano-crypto-praos" > cabal.project.local
          echo "  flags: -external-libsodium-vrf" >> cabal.project.local

      - name: Build haddocks
        run: |
          cabal update
          ./scripts/haddocks.sh

      - name: Upload GH pages artifact
        uses: actions/upload-pages-artifact@v2.0.0
        with:
          path: haddocks

  # Deploy job
  deploy:
    # Add a dependency to the build job
    needs: build

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Deploy only from the main branch
    if: ${{ github.ref == 'main' }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 # or the latest "vX.X.X" version tag for this action